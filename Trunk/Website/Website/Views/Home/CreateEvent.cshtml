@model Website.Models.CreateEventModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <title>CreateEvent</title>

    <style>
         /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
         #map {
             height: 100%;
         }
         /* Optional: Makes the sample page fill the window. */
         html, body {
             height: 100%;
             margin: 0;
             padding: 0;
         }
       
    </style>
</head>
<body>
    <div>
    @using (Html.BeginForm("AddEvent", "Home"))
    {
        <div class="form-group" style="margin-left:10px">
            <div class="control-group">
                @Html.LabelFor(m => m.Name)
                <div class="controls">
                    @Html.TextBoxFor(m => m.Name)
                </div>
            </div>
            <br />
            <div class="control-group">
                @Html.LabelFor(m => m.EventTypes)
                <div class="controls">
                    @Html.DropDownListFor(m => m.SelectedEventType, new SelectList(Model.EventTypes, "Id", "Name"), "-- Select Event Type --")
                </div>
            </div>
            <br />
            <div class="control-group">
                @Html.LabelFor(m => m.Universities)
                <div class="controls">
                    @Html.DropDownListFor(m => m.SelectedUniversity, new SelectList(Model.Universities, "Id", "Name"), "-- Select University --")
                </div>
            </div>
            <br />
            <div class="control-group">
                @Html.LabelFor(m => m.EventCategories)
                <div class="controls">
                    @Html.DropDownListFor(m => m.SelectedCategory, new SelectList(Model.EventCategories, "Id", "Name"), "-- Select Event Category --")
                </div>
            </div>
            <br>
            <div class="control-group">
                @Html.LabelFor(m => m.Description)
                <div class="controls">
                    @Html.TextAreaFor(m => m.Description, new { @rows = "5", cols = "50" })
                </div>
            </div>
            <br />
            <div class="control-group">
                @Html.LabelFor(m => m.ContactPhone)
                <div class="controls">
                    @Html.TextBoxFor(m => m.ContactPhone)
                </div>
            </div>
            <br>
            <div class="control-group">
                @Html.LabelFor(m => m.ContactEmail)
                <div class="controls">
                    @Html.TextBoxFor(m => m.ContactEmail)
                </div>
            </div>
            <br />
            <div class="control-group">
                @Html.LabelFor(m => m.StartTime)
                <div class="controls">
                    @Html.TextBoxFor(m => m.StartTime, new { @type = "time" })
                </div>
            </div>
            <br>
            <div class="control-group">
                @Html.LabelFor(m => m.EndTime)
                <div class="controls">
                    @Html.TextBoxFor(m => m.EndTime, new { @type = "time" })
                </div>
            </div>
            <br>
            <div class="control-group">
                @Html.LabelFor(m => m.Date)
                <div class="controls">
                    @Html.TextBoxFor(m => m.Date, new { @type = "date" })
                </div>
            </div>
            <br />
            <input type="submit" name="submit" value="Submit" />
        </div>
    }
    </div>
    <div id="map" height="460px" width="400px"></div>
    <div id="form">
        <table>
            <tr><td></td><td><input type='button' value='Save' onclick='saveData()' /></td></tr>
        </table>
    </div>


    <script>
        var map;
        var marker;
        var infowindow;
        var messagewindow;

        function initMap() {
            var florida = { lat: 28.6024, lng: -81.2001 };
            map = new google.maps.Map(document.getElementById('map'), {
                center: florida,
                zoom: 12
            });

            infowindow = new google.maps.InfoWindow({
                content: document.getElementById('form')
            });

            messagewindow = new google.maps.InfoWindow({
                content: document.getElementById('message')
            });

            google.maps.event.addListener(map, 'click', function (event) {
                marker = new google.maps.Marker({
                    position: event.latLng,
                    map: map
                });


                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.open(map, marker);
                });
            });
        }

        function saveData() {
            var name = escape(document.getElementById('name').value);

            var latlng = marker.getPosition();
            var url = '&lat=' + latlng.lat() + '&lng=' + latlng.lng();

            downloadUrl(url, function (data, responseCode) {

                if (responseCode == 200 && data.length <= 1) {
                    infowindow.close();
                    messagewindow.open(map, marker);
                }
            });
        }

        function downloadUrl(url, callback) {
            var request = window.ActiveXObject ?
                new ActiveXObject('Microsoft.XMLHTTP') :
                new XMLHttpRequest;

            request.onreadystatechange = function () {
                if (request.readyState == 4) {
                    request.onreadystatechange = doNothing;
                    callback(request.responseText, request.status);
                }
            };

            request.open('GET', url, true);
            request.send(null);
        }

        function doNothing() {
        }

    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB1rCahYMg_sbFtaUZbTz4a6rFTRdF-oXc&callback=initMap">
    </script>
</body>

</html>
